package oo;

import Projet.Main;

import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.*;

public class Appointment implements Comparable {
    private final Integer _appointmentID;
    private Integer _customerID;
    private Integer _technicianID;
    private String _type;
    private Double _price;
    private boolean _payed;
    private boolean _done;
    private String _comment;
    private String _feedback;
    private LocalDateTime _date;

    public Appointment(Integer _appointmentID, Integer _customerID, Integer _technicianID, String _type, Double _price, boolean _payed, String _comment, String _feedback, LocalDateTime _date, boolean _done) {
        this._appointmentID = _appointmentID;
        this._customerID = _customerID;
        this._technicianID = _technicianID;
        this._type = _type;
        this._price = _price;
        this._payed = _payed;
        this._comment = _comment;
        this._feedback = _feedback;
        this._date = _date;
        this._done = _done;
    }

    public Integer getCustomerID() {
        return _customerID;
    }

    public void setCustomerID(Integer _userID) {
        this._customerID = _userID;
    }

    public Integer getTechnicianID() {
        return _technicianID;
    }

    public void setTechnicianID(Integer _technicianID) {
        this._technicianID = _technicianID;
    }

    public String getType() {
        return _type;
    }

    public void setType(String _type) {
        this._type = _type;
    }

    public Double getPrice() {
        return _price;
    }

    public void setPrice(Double _price) {
        this._price = _price;
    }

    public boolean isPayed() {
        return _payed;
    }

    public void setPayed(boolean _payed) {
        this._payed = _payed;
    }

    public boolean isDone() { return _done; }

    public void setDone(boolean _done) { this._done = _done; }

    public String getComment() {
        return _comment;
    }

    public void setComment(String _comment) {
        this._comment = _comment;
    }

    public String getFeedback() {
        return _feedback;
    }

    public void setFeedback(String _feedback) {
        this._feedback = _feedback;
    }

    public LocalDateTime getDate() {
        return _date;
    }

    public void setDate(LocalDateTime _date) {
        this._date = _date;
    }

    public Integer getAppointmentID() {
        return _appointmentID;
    }

    /**
     * Generate a receipt in a text file
     * @param managerID int of manager creating receipt
     */
    public void generateReceipt(int managerID) {
        User c, t;
        c = User.searchListIDUser(Main.customersList, _customerID);
        t = User.searchListIDUser(Main.techniciansList, _technicianID);
        String date = _date.getDayOfMonth() + "_" + _date.getMonth() + "_" + _date.getYear() + "_" + _date.getHour();
        String nameFile = "receipts/" + date + "_C_" + c.getName() + "_T_" + t.getName() + ".txt";
        try {
            PrintWriter p = new PrintWriter(nameFile);
            p.println("Appointment ID: " + _appointmentID);
            p.println("Date: " + _date);
            p.println("Type of appointment: " + _type);
            p.println("Price: " + _price);
            p.println("Technician: " + t.getUserID() + " " + t.getName());
            p.println("Customer: " + c.getUserID() + " " + c.getName());
            if (managerID != -1) {
                User m = User.searchListIDUser(Main.managersList, managerID);
                p.println("Generated by " + m.getUserID() + " " + m.getName());
            }

            p.close();
        } catch (Exception ex) {
        }
    }

    @Override
    public int compareTo(Object o) {
        return this.getDate().compareTo(((Appointment) o).getDate());
    }

    /**
     * Retrieve Appointments of a customer
     *
     * @param list ArrayList<Appointment>
     * @param c    Customer
     * @param type String Type of search (all, planned, history, payed, nonPayed, done, nonDone)
     * @return ArrayList<Appointment> List of appointments of user
     */
    public static ArrayList<Appointment> getAppointmentCustomer(ArrayList<Appointment> list, Customer c, String type) {
        ArrayList<Appointment> appointments = new ArrayList<>();
        for (Appointment a : list) {
            if (Objects.equals(a.getCustomerID(), c.getUserID())) {
                addAppointment(type, appointments, a);
            }
        }
        return appointments;
    }

    /**
     * Retrieve Appointments of a technician
     *
     * @param list ArrayList<Appointment>
     * @param t    Technician
     * @param type String Type of search (all, planned, history, payed, nonPayed, done, nonDone)
     * @return ArrayList<Appointment> List of appointments of user
     */
    public static ArrayList<Appointment> getAppointmentTechnician(ArrayList<Appointment> list, Technician t, String type) {
        ArrayList<Appointment> appointments = new ArrayList<>();
        if (list == null || list.isEmpty()) return appointments;
        for (Appointment a : list) {
            if (Objects.equals(a.getTechnicianID(), t.getUserID())) {
                addAppointment(type, appointments, a);
            }
        }
        return appointments;
    }

    public static ArrayList<Appointment> getAppointments(ArrayList<Appointment> list, String type) {
        ArrayList<Appointment> appointments = new ArrayList<>();
        if (list == null || list.isEmpty()) return appointments;
        for (Appointment a : list) {
            addAppointment(type, appointments, a);
        }
        return appointments;
    }

    /**
     * Add an appointment to list if corresponds to condition
     *
     * @param type         String Type of search (all, planned, history, payed, nonPayed, done, nonDone)
     * @param appointments ArrayList of Appointment to add single appointment
     * @param a            Appointment to check
     */
    private static void addAppointment(String type, ArrayList<Appointment> appointments, Appointment a) {
        LocalDateTime actualTime = LocalDateTime.now();
        boolean all = type.equals("all");
        boolean planned = type.equals("planned") && a.getDate().compareTo(actualTime) > 0;
        boolean history = type.equals("history") && a.getDate().compareTo(actualTime) < 0;
        boolean payed = type.equals("payed") && a.isPayed();
        boolean nonPayed = type.equals("nonPayed") && !a.isPayed();
        boolean done = type.equals("done") && a.isDone();
        boolean nonDone = type.equals("nonDone") && !a.isDone();
        if (all || planned || history || payed || nonPayed || done || nonDone) {
            appointments.add(a);
        }
    }

    /**
     * Return an appointment that corresponds to an ID
     *
     * @param list ArrayList of Appointment
     * @param id   Integer of Appointment searched
     * @return Appointment or null
     */
    public static Appointment getAppointmentID(ArrayList<Appointment> list, Integer id) {
        if (!list.isEmpty()) {
            for (Appointment a : list) {
                if (id.equals(a.getAppointmentID())) {
                    return a;
                }
            }
        }
        return null;
    }
}
